name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

jobs:
  # ---- Job 1: tests (no Azure needed) ----
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # ---- Job 2: build & push (needs env secrets) ----
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    environment: <YOUR_ENV_NAME>     # <-- set to the Environment that holds the secrets

    env:
      # use environment secrets here
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g. myregistry.azurecr.io
      IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate AZURE_CREDENTIALS secret
        shell: bash
        run: |
          jq -re 'has("clientId") and has("clientSecret") and has("tenantId") and has("subscriptionId")' \
            <<< '${{ secrets.AZURE_CREDENTIALS }}' >/dev/null || {
              echo "::error::AZURE_CREDENTIALS must be a JSON with clientId, clientSecret, tenantId, subscriptionId"; exit 1; }

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Derive ACR name
        run: echo "ACR_NAME=${ACR_LOGIN_SERVER%%.*}" >> "$GITHUB_ENV"

      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"

      - name: Build and Push Product Service Image
        run: |
          IMAGE_BASE="${ACR_LOGIN_SERVER}/product_service"
          docker build -t "${IMAGE_BASE}:latest" -t "${IMAGE_BASE}:${IMAGE_TAG}" ./backend/product_service
          docker push "${IMAGE_BASE}:latest"
          docker push "${IMAGE_BASE}:${IMAGE_TAG}"

      - name: Build and Push Order Service Image
        run: |
          IMAGE_BASE="${ACR_LOGIN_SERVER}/order_service"
          docker build -t "${IMAGE_BASE}:latest" -t "${IMAGE_BASE}:${IMAGE_TAG}" ./backend/order_service
          docker push "${IMAGE_BASE}:latest"
          docker push "${IMAGE_BASE}:${IMAGE_TAG}"

      - name: Logout from Azure
        if: always()
        run: az logout || true
